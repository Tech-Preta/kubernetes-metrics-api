# k8s-metrics-api-chart/values.yaml

replicaCount: 1

# Namespace (defaults to Release namespace if not specified)
namespace: ""

image:
  repository: nataliagranato/k8s-metrics-api # Substitua pelo nome da sua imagem Docker
  pullPolicy: Always
  tag: "v1.0.1" # Atualizado para a nova versão que trata o problema de token
  # Image digest for additional security (CKV_K8S_43)
  # Uncomment and set the correct digest when available
  digest: sha256:abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890

imagePullSecrets: [] # Se sua imagem estiver em um registro privado
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Especifica se uma ServiceAccount deve ser criada
  create: true
  # Anotações para adicionar à ServiceAccount
  annotations: {}
  # O nome da ServiceAccount a ser usada.
  # Se não for definida e create for true, um nome será gerado usando o template fullname.
  name: ""

podAnnotations: {}
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 10001
  runAsGroup: 10001
  fsGroup: 10001
  seccompProfile:
    type: RuntimeDefault

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 10001
  runAsGroup: 10001
  allowPrivilegeEscalation: false
  seccompProfile:
    type: RuntimeDefault

service:
  type: ClusterIP
  port: 8080 # Porta que o serviço exporá
  targetPort: 8080 # Porta do container onde a aplicação está rodando (PORT da API)

ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    cpu: 500m
    memory: 256Mi
  requests:
    cpu: 100m
    memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}
tolerations: []
affinity: {}

# Configurações específicas da aplicação
application:
  # O token de autenticação para a API.
  # É ALTAMENTE RECOMENDADO usar um Secret existente ou permitir que o chart crie um.
  # Não coloque tokens sensíveis diretamente aqui em produção.
  # IMPORTANTE: Gere um token seguro e mantenha-o protegido.
  # Exemplo: openssl rand -base64 32
  authToken: "" # DEVE ser definido durante o deploy ou usar existingAuthSecretName
  # Se true, um novo Secret será criado com o authToken acima.
  createAuthSecret: true
  # Se createAuthSecret for false, especifique o nome de um Secret existente que contém o token.
  # O Secret deve ter uma chave 'auth-token' (ou a chave especificada em authSecretKey).
  existingAuthSecretName: "" # Deixe como está, pois createAuthSecret é true
  authSecretKey: "auth-token" # A chave dentro do Secret que armazena o token
  # Porta em que a aplicação escuta dentro do container.
  # Deve corresponder ao que a API Go está configurada para usar (padrão 8080 no código).
  containerPort: 8080

# NOTA IMPORTANTE SOBRE MUDANÇAS DE SEGURANÇA:
# 
# A partir desta versão, por questões de segurança (CKV_K8S_35):
# - O token de autenticação NÃO é mais passado como variável de ambiente
# - O token é montado como arquivo em /etc/secrets/auth-token
# - A aplicação deve ser atualizada para ler o token do arquivo ao invés da variável EXPECTED_AUTH_TOKEN
#
# Para aplicações que ainda dependem da variável de ambiente, você pode descomentar 
# as linhas comentadas no deployment.yaml e comentar a seção de volumeMounts

# Configurações de RBAC
rbac:
  # Especifica se os recursos RBAC (ClusterRole, ClusterRoleBinding) devem ser criados
  create: true

# Configurações de NetworkPolicy
networkPolicy:
  enabled: true
  ingress:
    from:
    # Allow ingress from all pods in the same namespace by default
    - namespaceSelector:
        matchLabels:
          name: default  # This should be set during deployment
    # Allow ingress from pods with specific labels (customize as needed)
    # - podSelector:
    #     matchLabels:
    #       app: allowed-app
  egress:
    additional: []
    # Add additional egress rules if needed
    # - to:
    #   - namespaceSelector: {}
    #   ports:
    #   - protocol: TCP
    #     port: 80
