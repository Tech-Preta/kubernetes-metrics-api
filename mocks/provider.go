// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

type Provider_Expecter struct {
	mock *mock.Mock
}

func (_m *Provider) EXPECT() *Provider_Expecter {
	return &Provider_Expecter{mock: &_m.Mock}
}

// GetAuthToken provides a mock function with no fields
func (_m *Provider) GetAuthToken() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAuthToken")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Provider_GetAuthToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthToken'
type Provider_GetAuthToken_Call struct {
	*mock.Call
}

// GetAuthToken is a helper method to define mock.On call
func (_e *Provider_Expecter) GetAuthToken() *Provider_GetAuthToken_Call {
	return &Provider_GetAuthToken_Call{Call: _e.mock.On("GetAuthToken")}
}

func (_c *Provider_GetAuthToken_Call) Run(run func()) *Provider_GetAuthToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_GetAuthToken_Call) Return(_a0 string) *Provider_GetAuthToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_GetAuthToken_Call) RunAndReturn(run func() string) *Provider_GetAuthToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogLevel provides a mock function with no fields
func (_m *Provider) GetLogLevel() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLogLevel")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Provider_GetLogLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogLevel'
type Provider_GetLogLevel_Call struct {
	*mock.Call
}

// GetLogLevel is a helper method to define mock.On call
func (_e *Provider_Expecter) GetLogLevel() *Provider_GetLogLevel_Call {
	return &Provider_GetLogLevel_Call{Call: _e.mock.On("GetLogLevel")}
}

func (_c *Provider_GetLogLevel_Call) Run(run func()) *Provider_GetLogLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_GetLogLevel_Call) Return(_a0 string) *Provider_GetLogLevel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_GetLogLevel_Call) RunAndReturn(run func() string) *Provider_GetLogLevel_Call {
	_c.Call.Return(run)
	return _c
}

// GetPort provides a mock function with no fields
func (_m *Provider) GetPort() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPort")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Provider_GetPort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPort'
type Provider_GetPort_Call struct {
	*mock.Call
}

// GetPort is a helper method to define mock.On call
func (_e *Provider_Expecter) GetPort() *Provider_GetPort_Call {
	return &Provider_GetPort_Call{Call: _e.mock.On("GetPort")}
}

func (_c *Provider_GetPort_Call) Run(run func()) *Provider_GetPort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_GetPort_Call) Return(_a0 string) *Provider_GetPort_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_GetPort_Call) RunAndReturn(run func() string) *Provider_GetPort_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with no fields
func (_m *Provider) Validate() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Provider_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type Provider_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
func (_e *Provider_Expecter) Validate() *Provider_Validate_Call {
	return &Provider_Validate_Call{Call: _e.mock.On("Validate")}
}

func (_c *Provider_Validate_Call) Run(run func()) *Provider_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_Validate_Call) Return(_a0 error) *Provider_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_Validate_Call) RunAndReturn(run func() error) *Provider_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
