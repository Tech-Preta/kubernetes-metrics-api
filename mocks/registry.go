// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	prometheus "github.com/prometheus/client_golang/prometheus"
	mock "github.com/stretchr/testify/mock"
)

// Registry is an autogenerated mock type for the Registry type
type Registry struct {
	mock.Mock
}

type Registry_Expecter struct {
	mock *mock.Mock
}

func (_m *Registry) EXPECT() *Registry_Expecter {
	return &Registry_Expecter{mock: &_m.Mock}
}

// MustRegister provides a mock function with given fields: collectors
func (_m *Registry) MustRegister(collectors ...prometheus.Collector) {
	_va := make([]interface{}, len(collectors))
	for _i := range collectors {
		_va[_i] = collectors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Registry_MustRegister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MustRegister'
type Registry_MustRegister_Call struct {
	*mock.Call
}

// MustRegister is a helper method to define mock.On call
//   - collectors ...prometheus.Collector
func (_e *Registry_Expecter) MustRegister(collectors ...interface{}) *Registry_MustRegister_Call {
	return &Registry_MustRegister_Call{Call: _e.mock.On("MustRegister",
		append([]interface{}{}, collectors...)...)}
}

func (_c *Registry_MustRegister_Call) Run(run func(collectors ...prometheus.Collector)) *Registry_MustRegister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]prometheus.Collector, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(prometheus.Collector)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Registry_MustRegister_Call) Return() *Registry_MustRegister_Call {
	_c.Call.Return()
	return _c
}

func (_c *Registry_MustRegister_Call) RunAndReturn(run func(...prometheus.Collector)) *Registry_MustRegister_Call {
	_c.Run(run)
	return _c
}

// Register provides a mock function with given fields: collector
func (_m *Registry) Register(collector prometheus.Collector) error {
	ret := _m.Called(collector)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(prometheus.Collector) error); ok {
		r0 = rf(collector)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Registry_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type Registry_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - collector prometheus.Collector
func (_e *Registry_Expecter) Register(collector interface{}) *Registry_Register_Call {
	return &Registry_Register_Call{Call: _e.mock.On("Register", collector)}
}

func (_c *Registry_Register_Call) Run(run func(collector prometheus.Collector)) *Registry_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(prometheus.Collector))
	})
	return _c
}

func (_c *Registry_Register_Call) Return(_a0 error) *Registry_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Registry_Register_Call) RunAndReturn(run func(prometheus.Collector) error) *Registry_Register_Call {
	_c.Call.Return(run)
	return _c
}

// Unregister provides a mock function with given fields: collector
func (_m *Registry) Unregister(collector prometheus.Collector) bool {
	ret := _m.Called(collector)

	if len(ret) == 0 {
		panic("no return value specified for Unregister")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(prometheus.Collector) bool); ok {
		r0 = rf(collector)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Registry_Unregister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unregister'
type Registry_Unregister_Call struct {
	*mock.Call
}

// Unregister is a helper method to define mock.On call
//   - collector prometheus.Collector
func (_e *Registry_Expecter) Unregister(collector interface{}) *Registry_Unregister_Call {
	return &Registry_Unregister_Call{Call: _e.mock.On("Unregister", collector)}
}

func (_c *Registry_Unregister_Call) Run(run func(collector prometheus.Collector)) *Registry_Unregister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(prometheus.Collector))
	})
	return _c
}

func (_c *Registry_Unregister_Call) Return(_a0 bool) *Registry_Unregister_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Registry_Unregister_Call) RunAndReturn(run func(prometheus.Collector) bool) *Registry_Unregister_Call {
	_c.Call.Return(run)
	return _c
}

// NewRegistry creates a new instance of Registry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *Registry {
	mock := &Registry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
